generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  username            String?    @unique
  passwordHash        String?
  email               String     @unique
  emailVerified       DateTime?  @map("email_verified")
  image               String?
  phoneNumber         String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  profilePicture      String?
  address             String?
  dateOfBirth         DateTime?
  gender              String?
  interests           String?
  preferredCategories String?
  searchHistory       String?
  favoriteListings    String?
  jobSeeker           JobSeeker?
  listings            Listing[]
  reviews             Review[]
  accounts            Account[]
  sessions            Session[]

  @@map("users")
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  parentId    String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryToCategory")
  listings    Listing[]
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  categoryId  String   @db.ObjectId
  title       String
  description String
  price       Float?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  reviews     Review[]
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  imageUrl  String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model JobSeeker {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId @unique
  resumeUrl  String?
  skills     String?
  experience String?
  desiredJob String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")

  @@index([parentId])
}

model Listing {
  id                     BigInt    @id
  title                  String?
  description            String?
  timeline               String?
  subcategory_id         BigInt?
  price                  Float?
  currency               String?
  town                   String?
  address                String?
  user_id                String?
  created_at             DateTime? @db.Timestamptz(6)
  updated_at             DateTime? @db.Timestamptz(6)
  status                 String?
  views                  String?
  cover_image            String?
  images                 Json?
  is_boosted             String?
  is_boosted_type        String?
  is_boosted_expiry_date String?
  expiry_date            DateTime? @db.Timestamptz(6)
  tags                   Json?
  condition              String?
  negotiable             BigInt?
  delivery_available     BigInt?
  rating                 String?
  user                   User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([title])
  @@index([description])
  @@index([tags])
  @@index([created_at])
  @@index([is_boosted])
  @@index([subcategory_id])
}

model Image {
  id        Int      @id @default(autoincrement())
  listingId Int
  imageUrl  String
  createdAt DateTime @default(now())

  @@index([listingId])
}

model Review {
  id        Int      @id @default(autoincrement())
  listingId Int
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  parentId  Int?
  user      User     @relation(fields: [userId], references: [id])

  @@index([listingId])
  @@index([userId])
}

model JobSeeker {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  resumeUrl  String?
  skills     String?
  experience String?
  desiredJob String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}


model User {
  id                    String     @id @default(cuid())
  name                  String?
  username              String?    @unique
  passwordHash          String?
  email                 String     @unique
  emailVerified         DateTime?  @map("email_verified")
  image                 String?
  profilImage           String?
  phoneNumber           String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  profilePicture        String?
  address               String?
  dateOfBirth          DateTime?
  gender                String?
  interests             String?
  preferredCategories   String?
  searchHistory         String?
  favoriteListings      String?
  role                  UserRole   @default(USER)
  
  // Relations
  listings             Listing[]
  reviews              Review[]
  jobSeeker           JobSeeker?
  accounts             Account[]
  sessions             Session[]

  @@map("users")
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  token   String
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([email, token])
  @@map("verificationtokens")
}


enum UserRole {
  ADMIN
  USER
}

model Town {
  id              BigInt    @id
  name            String?
  slug            String?
  region          String?
  country         String?
  latitude        Float?
  longitude       Float?
  postal_code     BigInt?
  active_listings BigInt?
  population      BigInt?
  is_featured     Boolean?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
}
